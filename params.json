{"name":"Parallax","tagline":"ES6/ES2015 HW accelerated scrollable images parallax","body":"# Why\r\n\r\n> Oh no, why another parallax library? Do we really need it?\r\n\r\nThere are many parallax scripts but none of them was satisfying my personal needs:\r\n\r\n  - No dependencies\r\n  - No background positioning, they cause weird scroll issues on safari\r\n  - Modern and flexible api\r\n\r\nSo I decided to make my own, and you can be free to use it or simply ignore it!\r\n\r\n# Demos\r\n\r\n  - [demo](http://gianlucaguarini.github.io/parallax/demo)\r\n\r\n# Usage\r\n\r\nOnce you have included the script in your page, you should wrap your parallax images in a wrapper\r\n\r\n```html\r\n<div style=\"position: relative; height: 300px; overflow: hidden;\">\r\n  <img class=\"parallax\" src=\"path/to/the/image.jpg\" />\r\n</div>\r\n```\r\n\r\nThe Parallax api is really simple and the following snippet should be enough:\r\n\r\n```js\r\nvar p = new Parallax('.parallax').init()\r\n```\r\n\r\n## API\r\n\r\nEach Parallax instance has some useful methods that could be used to adapt it to your application needs\r\n\r\n### Parallax.init\r\n\r\nInitialize the parallax internal event listeners. The listeners to `image:loaded` and `images:loaded` should be set before this method gets called\r\n\r\n### Parallax.on\r\n\r\nThe `on` method allows you to listen the internal Parallax events from the outside.<br />\r\nCurrently it supports:\r\n  - `image:loaded`: when a parallax image gets completely loaded\r\n  - `images:loaded`: when all the images get loaded\r\n  - `draw`: when a parallax image comes in the viewport and gets moved\r\n  - `resize`: when the parallax images get resized\r\n\r\n```js\r\np.on('image:loaded', function(image){\r\n  // do something with the image tag\r\n})\r\np.init()\r\n```\r\n\r\n### Parallax.off\r\n\r\nStop listening an internal Parallax event\r\n\r\n```js\r\nvar fn = function (image) {\r\n    // do something with the image tag just drawn\r\n    p.off('draw', fn) // stop listening the draw event\r\n  }\r\np.on('draw', fn)\r\np.init()\r\n```\r\n\r\n### Parallax.refresh\r\n\r\nRefresh the position of the images visible in the viewport\r\n\r\n```js\r\n// do extremely heavy dom updates\r\np.refresh()\r\n```\r\n\r\n### Parallax.add\r\n\r\nAdd new images to the parallax instance\r\n\r\n```js\r\n// inject new images\r\np.add('.parallax-2')\r\n```\r\n\r\n### Parallax.remove\r\n\r\nRemove images from the parallax instance\r\n\r\n```js\r\np.remove('.parallax-2') // remove the images from the parallax\r\n// and also from the DOM...\r\n```\r\n\r\n### Parallax.destroy\r\n\r\nDestroy the parallax instance removing all the internal and external callbacks to its internal events\r\n\r\n```js\r\np.destroy() // the parallax is dead!\r\n```\r\n\r\n# Contributing\r\n\r\n## Available tasks\r\n\r\n### Build and test\r\n```shell\r\n$ ./make # or also `$ npm run default`\r\n```\r\n\r\n### Convert the ES6 code into valid ES5 combining all the modules into one single file\r\n```shell\r\n$ ./make build # or also `$ npm run build`\r\n```\r\n\r\n### Run all the tests\r\n```shell\r\n$ ./make test # or also `$ npm run test`\r\n```\r\n\r\n### Start a nodejs static server\r\n```shell\r\n$ ./make serve # or also `$ npm run serve`\r\n```\r\n\r\n### To compile and/or test the project anytime a file gets changed\r\n```shell\r\n$ ./make watch # or also `$ npm run watch`\r\n```\r\n\r\n","google":"UA-8059670-3","note":"Don't delete this file! It's used internally to help with page regeneration."}