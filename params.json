{"name":"Parallax","tagline":"ES6/ES2015 HW accelerated scrollable images parallax","body":"\r\n[![Build Status][travis-image]][travis-url]\r\n[![NPM version][npm-version-image]][npm-url]\r\n[![NPM downloads][npm-downloads-image]][npm-url]\r\n[![MIT License][license-image]][license-url]\r\n[![Coverage Status][coverage-image]][coverage-url]\r\n[![Code Quality][codeclimate-image]][codeclimate-url]\r\n\r\n# Why\r\n\r\n> Oh no, why another parallax script? Do we really need it?\r\n\r\nThere are many parallax scripts but none of them was satisfying my personal needs:\r\n\r\n  - No dependencies\r\n  - No background positioning and heavy obtrusive DOM manipulations\r\n  - Build only for modern devices without internal hacks\r\n  - Modern and flexible api being thought mainly for ajax applications\r\n  - Modern and clean ES6/2015 source code\r\n\r\nSo I decided to make my own and you can be free to use it or simply ignore it and move forward to the next one!\r\n\r\n# Demos\r\n\r\n  - [demo](http://gianlucaguarini.github.io/parallax/demo)\r\n\r\n# Usage\r\n\r\n## Installation\r\n\r\n```sh\r\n$ npm install scroll-parallax --save\r\n# or\r\n$ bower install scroll-parallax --save\r\n```\r\n\r\n## Markup and initialization\r\n\r\nOnce you have included the script in your page, you should wrap your parallax images in a wrapper having an `height`, `position:relative or absolute` and `overflow: hidden`\r\nThe images will be stretched to fit always the whole wrapper size\r\n\r\n```html\r\n<figure style=\"position: relative; height: 300px; overflow: hidden;\">\r\n  <img class=\"parallax\" src=\"path/to/the/image.jpg\" />\r\n</figure>\r\n```\r\n\r\nThe Parallax api is really simple and the following snippet should be enough:\r\n\r\n```js\r\nvar p = new Parallax('.parallax').init()\r\n```\r\n\r\n## Options\r\n\r\nThe options available are only 3 at moment:\r\n\r\n| Type    | Name            | Default Value   | Description                                                                                                                                                                         |\r\n|-------- |---------------  |---------  |------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\r\n| Number  | `offsetYBounds`   | 50        | the offset top and bottom boundaries in pixels used by the parallax to consider an image in the viewport                                                                            |\r\n| Number  | `intensity`       | 30        | the intensity of the parallax effect                                                                                                                                                |\r\n| Number  | `center`          | 0.5       | the vertical center of the parallax. If you reduce this value the image will be centered when it's more on the top of the screen reducing it will look centered at bottom  |\r\n\r\nYou can set the Parallax options in this way:\r\n\r\n```js\r\nvar p = new Parallax('.parallax', {\r\n  offsetYBounds: 50,\r\n  intensity: 30,\r\n  center: 0.5\r\n}).init()\r\n```\r\n\r\nEach image could be configured using custom Parallax options (except the `offsetYBounds`) overriding the default:\r\n\r\n```html\r\n<figure>\r\n  <img class=\"parallax\" data-center=\"0.8\" data-intensity=\"50\" src=\"path/to/the/image.jpg\" />\r\n</figure>\r\n<figure>\r\n  <img class=\"parallax\" data-center=\"0.2\" data-intensity=\"10\" src=\"path/to/the/image.jpg\" />\r\n</figure>\r\n```\r\n\r\n## API\r\n\r\nEach Parallax instance has some useful methods that could be used to adapt it to your application needs\r\n\r\n### Parallax.init\r\n\r\nInitialize the parallax internal event listeners. The listeners to `image:loaded` and `images:loaded` should be set before this method gets called\r\n\r\n### Parallax.on\r\n\r\nThe `on` method allows you to listen the internal Parallax events from the outside.<br />\r\nCurrently it supports:\r\n  - `image:loaded`: when a parallax image gets completely loaded\r\n  - `images:loaded`: when all the images get loaded\r\n  - `draw`: when a parallax image comes in the viewport and gets moved\r\n  - `resize`: when the parallax images get resized\r\n\r\n```js\r\np.on('image:loaded', function(image){\r\n  // do something with the image tag\r\n})\r\n```\r\n\r\n### Parallax.off\r\n\r\nStop listening an internal Parallax event\r\n\r\n```js\r\nvar fn = function (image) {\r\n    // do something with the image tag just drawn\r\n    p.off('draw', fn) // stop listening the draw event\r\n  }\r\np.on('draw', fn)\r\n```\r\n\r\n### Parallax.refresh\r\n\r\nRefresh the position of the images visible in the viewport\r\n\r\n```js\r\n// do extremely heavy dom updates\r\np.refresh()\r\n```\r\n\r\n### Parallax.add\r\n\r\nAdd new images to the parallax instance\r\n\r\n```js\r\n// inject new images\r\np.add('.parallax-2')\r\n```\r\n\r\n### Parallax.remove\r\n\r\nRemove images from the parallax instance\r\n\r\n```js\r\np.remove('.parallax-2') // remove the images from the parallax\r\n// and also from the DOM...\r\n```\r\n\r\n### Parallax.destroy\r\n\r\nDestroy the parallax instance removing all the internal and external callbacks to its internal events\r\n\r\n```js\r\np.destroy() // the parallax is dead!\r\n```\r\n\r\n# Contributing\r\n\r\n## Available tasks\r\n\r\n### Build and test\r\n```shell\r\n$ ./make # or also `$ npm run default`\r\n```\r\n\r\n### Convert the ES6 code into valid ES5 combining all the modules into one single file\r\n```shell\r\n$ ./make build # or also `$ npm run build`\r\n```\r\n\r\n### Run all the tests\r\n```shell\r\n$ ./make test # or also `$ npm run test`\r\n```\r\n\r\n### Start a nodejs static server\r\n```shell\r\n$ ./make serve # or also `$ npm run serve`\r\n```\r\n\r\n### To compile and/or test the project anytime a file gets changed\r\n```shell\r\n$ ./make watch # or also `$ npm run watch`\r\n```\r\n\r\n[travis-image]:https://img.shields.io/travis/GianlucaGuarini/parallax.svg?style=flat-square\r\n[travis-url]:https://travis-ci.org/GianlucaGuarini/parallax\r\n\r\n[license-image]:http://img.shields.io/badge/license-MIT-000000.svg?style=flat-square\r\n[license-url]:LICENSE\r\n\r\n[npm-version-image]:http://img.shields.io/npm/v/scroll-parallax.svg?style=flat-square\r\n[npm-downloads-image]:http://img.shields.io/npm/dm/scroll-parallax.svg?style=flat-square\r\n[npm-url]:https://npmjs.org/package/scroll-parallax\r\n\r\n[coverage-image]:https://img.shields.io/coveralls/GianlucaGuarini/parallax/master.svg?style=flat-square\r\n[coverage-url]:https://coveralls.io/r/GianlucaGuarini/parallax?branch=master\r\n\r\n[codeclimate-image]:https://img.shields.io/codeclimate/github/GianlucaGuarini/parallax.svg?style=flat-square\r\n[codeclimate-url]:https://codeclimate.com/github/GianlucaGuarini/parallax\r\n\r\n","google":"UA-8059670-3","note":"Don't delete this file! It's used internally to help with page regeneration."}